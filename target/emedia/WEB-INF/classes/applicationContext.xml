<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">
	<!-- enable component scanning (beware that this does not enable mapper scanning!) -->  
	<context:component-scan base-package="com.syou.emedia" />
	<!-- enable autowire -->
	<context:annotation-config />
	<!-- 
		To further configure the async-support implement a AsyncTaskExecutor
		By default Spring MVC uses a SimpleAsyncTaskExecutor to execute Callable instances returned by controller methods. 
		For production you must replace it with an AsyncTaskExecutor implementation configured appropriately for your environment.
		2014/01/21 you should modify the property values if you deploy this project on your production environment.
	 -->
	<bean id="asyncTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"><!-- org.springframework.core.task.AsyncTaskExecutor -->
	    <property name="corePoolSize" value="10" />
	    <property name="maxPoolSize" value="100" />
	    <property name="queueCapacity" value="25" />
	</bean>
	<!-- enable spring mvc annotation -->
    <mvc:annotation-driven >
	    <mvc:async-support default-timeout="30000" task-executor="asyncTaskExecutor" >
	    	<mvc:callable-interceptors>
				<bean class="com.syou.emedia.web.interceptors.TimeoutCallableProcessingInterceptor" />
	    	</mvc:callable-interceptors>
	    </mvc:async-support>
	</mvc:annotation-driven>
    
    <!-- 配置视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">    
        <property name="prefix" value="/WEB-INF/jsp/"/>    
        <property name="suffix" value=".jsp"/><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->    
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />    
    </bean>   
     
     <!-- 上传 需要使用到的配置-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<property name="defaultEncoding" value="UTF-8"/>
        <property name="maxUploadSize" value="1046666000"/>
    </bean>
    <!--解决静态资源的访问问题-->
 	<mvc:resources location="/statics/" mapping="/statics/**"/>
	<!-- <mvc:default-servlet-handler/> -->
	
    	<!-- 接口日志拦截器  -->
	<bean id="intfInterceptor" class="com.syou.emedia.server.utils.IntfLogInterceptor" />
	
 	<aop:aspectj-autoproxy proxy-target-class="true" />
 	<aop:config>
		<aop:aspect id="logAspect" ref="intfInterceptor">
			<aop:pointcut expression="within(@org.springframework.stereotype.Controller *)" id="intfPointCut"/>
			<aop:around method="doAround" pointcut-ref="intfPointCut"/>
		</aop:aspect>
	</aop:config>
</beans>